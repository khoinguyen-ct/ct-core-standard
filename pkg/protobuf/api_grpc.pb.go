// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package ct_grpc_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdListingServiceClient is the client API for AdListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdListingServiceClient interface {
	GetAdInfo(ctx context.Context, in *GetAdInfoRequest, opts ...grpc.CallOption) (*GetAdInfoResponse, error)
}

type adListingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdListingServiceClient(cc grpc.ClientConnInterface) AdListingServiceClient {
	return &adListingServiceClient{cc}
}

func (c *adListingServiceClient) GetAdInfo(ctx context.Context, in *GetAdInfoRequest, opts ...grpc.CallOption) (*GetAdInfoResponse, error) {
	out := new(GetAdInfoResponse)
	err := c.cc.Invoke(ctx, "/chotot.api.v1.ad_listing.AdListingService/GetAdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdListingServiceServer is the server API for AdListingService service.
// All implementations should embed UnimplementedAdListingServiceServer
// for forward compatibility
type AdListingServiceServer interface {
	GetAdInfo(context.Context, *GetAdInfoRequest) (*GetAdInfoResponse, error)
}

// UnimplementedAdListingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdListingServiceServer struct {
}

func (UnimplementedAdListingServiceServer) GetAdInfo(context.Context, *GetAdInfoRequest) (*GetAdInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdInfo not implemented")
}

// UnsafeAdListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdListingServiceServer will
// result in compilation errors.
type UnsafeAdListingServiceServer interface {
	mustEmbedUnimplementedAdListingServiceServer()
}

func RegisterAdListingServiceServer(s grpc.ServiceRegistrar, srv AdListingServiceServer) {
	s.RegisterService(&AdListingService_ServiceDesc, srv)
}

func _AdListingService_GetAdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdListingServiceServer).GetAdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chotot.api.v1.ad_listing.AdListingService/GetAdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdListingServiceServer).GetAdInfo(ctx, req.(*GetAdInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdListingService_ServiceDesc is the grpc.ServiceDesc for AdListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chotot.api.v1.ad_listing.AdListingService",
	HandlerType: (*AdListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdInfo",
			Handler:    _AdListingService_GetAdInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
